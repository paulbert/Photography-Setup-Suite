{"version":3,"sources":["app.js","filters/filterDirective.js","lists/listDirective.js","overlay/overlayDirective.js","filters/components/filterCheckboxComponentDirective.js","filters/components/filterQueryComponentDirective.js","filterController.js","filterService.js","components/filterComponentController.js","overlayController.js","listController.js","listServ.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjlDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjfile":"photo-tools.js","sourcesContent":["(function() {\r\n\tangular.module('photoEditComponents', ['listMod','filterMod','overlayMod']);\r\n\t\r\n})();","(function() {\r\n\t\r\n\t/*\r\n\tSearch variable should be an array of objects named the same as the properties of the objects within the list.\r\n\t\tRequires a 'query' property within object which is modeled to a text/input filter.\r\n\t\tIf the searched property is an array of objects (if, for example, images can be in many gallery groupings), add 'isArray' property and set to true, also add 'searchOn' property and set to the name of the property within objects.\r\n\t\tExample: images = [ {imgname: 'img1.jpg', galleries: [ { id:1, name:'gallery1' }, { id:2, name:'gallery2'} ]}, ...]\r\n\t\tsearch = { galleries: { query:'', isArray: true, searchOn: 'name' } }\r\n\t\tFor a checkbox filter, include an object called 'checkboxes' with a 'none' property and send in values as array through checkitems.\r\n\t\tBased on above example: search = { galleries: { ... checkboxes: { none: true }, checkitems = [ 'gallery1','gallery2' ]\r\n\t*/\r\n\t\r\n\tangular.module('filterMod',[])\r\n\t.directive('filterBar', function() {\r\n\t\treturn {\r\n\t\t\tscope: {\r\n\t\t\t\tsearch:'=',\r\n\t\t\t\tfposition:'=?',\r\n\t\t\t\tinline:'@?',\r\n\t\t\t\ttmplt:'=',\r\n\t\t\t\tcheckitems:'=?'\r\n\t\t\t},\r\n\t\t\ttemplate: '<div ng-include=\"templateUrl\"></div>',\r\n\t\t\tcontroller:'filterBarController',\r\n\t\t\tcontrollerAs:'fbar',\r\n\t\t\tlink: function(scope,element,attrs) {\r\n\t\t\t\tscope.templateUrl = scope.tmplt.base + scope.tmplt.fileName;\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\t;\r\n\t\t\r\n})();","(function() {\r\n\tangular.module('listMod',[])\r\n\t.directive('listOfItems',function() {\r\n\t\treturn {\r\n\t\t\tscope: {\r\n\t\t\t\tsearch:'=',\r\n\t\t\t\tlistName:'=list',\r\n\t\t\t\tkeyName:'@key',\r\n\t\t\t\tordKey:'@ordname',\r\n\t\t\t\t// Additional functions to be called from buttons in the list (save info, delete, etc)\r\n\t\t\t\taddFuncs:'=funcs',\r\n\t\t\t\ttmplt:'='\r\n\t\t\t},\r\n\t\t\ttemplate: '<div ng-include=\"templateUrl\"></div>',\r\n\t\t\tcontroller:'listController',\r\n\t\t\tcontrollerAs:'list',\r\n\t\t\tlink: function(scope,element,attrs) {\r\n\t\t\t\tscope.templateUrl = scope.tmplt.base + scope.tmplt.fileName;\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\t;\r\n})();","(function() {\r\n\t\r\n\tangular.module('overlayMod',[])\r\n\t.directive('overlay', function() {\r\n\t\treturn {\r\n\t\t\tscope: {\r\n\t\t\t\tmessage:'=',\r\n\t\t\t\tmessageNum:'=number',\r\n\t\t\t\tbtnConfig:'=cfg',\r\n\t\t\t\t// Function for action of overlay (cancel/back is in controller)\r\n\t\t\t\tdoAction:'=func',\r\n\t\t\t\tbase:'@?'\r\n\t\t\t},\r\n\t\t\tcontroller:'overlayController',\r\n\t\t\tcontrollerAs:'over',\r\n\t\t\ttemplate: '<div ng-include=\"templateUrl\"></div>',\r\n\t\t\tlink: function(scope,element,attrs) {\r\n\t\t\t\t// If no base is specified, use location if installed via bower.\r\n\t\t\t\tif(typeof scope.base === 'undefined') {\r\n\t\t\t\t\tscope.base = '/bower_components/Photography-Setup-Suite/templates/overlay/';\r\n\t\t\t\t}\r\n\t\t\t\tscope.templateUrl = scope.base + 'overlay.html';\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\t;\r\n})();","(function() {\r\n\t\r\n\tangular.module('filterMod')\r\n\t.directive('filterCheckbox', function() {\r\n\t\t\treturn {\r\n\t\t\t\tscope: {\r\n\t\t\t\t\titems:'=',\r\n\t\t\t\t\tsearch:'=',\r\n\t\t\t\t\tbase:'=?',\r\n\t\t\t\t\tlabel:'@?'\r\n\t\t\t\t},\r\n\t\t\t\tcontroller:'filterCompController',\r\n\t\t\t\tcontrollerAs:'fcomp',\r\n\t\t\t\ttemplate: '<div ng-include=\"templateUrl\"></div>',\r\n\t\t\t\tlink: function(scope,element,attrs) {\r\n\t\t\t\t\t// If no base is specified, use location if installed via bower.\r\n\t\t\t\t\tif(typeof scope.base === 'undefined') {\r\n\t\t\t\t\t\tscope.base = '/bower_components/Photography-Setup-Suite/templates/filters/';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscope.templateUrl = scope.base + 'filterCheckboxes.html';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t;\r\n})();","(function() {\r\n\t\r\n\tangular.module('filterMod')\r\n\t.directive('filterQuery', function() {\r\n\t\t\treturn {\r\n\t\t\t\tscope: {\r\n\t\t\t\t\tsearch:'=',\r\n\t\t\t\t\tbase:'=?',\r\n\t\t\t\t\tlabel:'@?'\r\n\t\t\t\t},\r\n\t\t\t\ttemplate: '<div ng-include=\"templateUrl\"></div>',\r\n\t\t\t\tlink: function(scope,element,attrs) {\r\n\t\t\t\t\t// If no base is specified, use location if installed via bower.\r\n\t\t\t\t\tif(typeof scope.base === 'undefined') {\r\n\t\t\t\t\t\tscope.base = '/bower_components/Photography-Setup-Suite/templates/filters/';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscope.templateUrl = scope.base + 'filterQuery.html';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t;\r\n})();","(function() {\r\n\t\r\n\tangular.module('filterMod')\r\n\t.controller('filterBarController', ['$scope', function($scope) {\r\n\t\t\t\r\n\t\t\tthis.galleries = [];\r\n\t\t\t\r\n\t\t\t// Toggles the position of the left side filter column\r\n\t\t\tthis.filterToggle = function() {\r\n\t\t\t\tvar fPos = $scope.fposition;\r\n\t\t\t\t$scope.fposition = (fPos === 0 ? -190 : 0);\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tvar fCtrl = this;\r\n\t\t\t\r\n\t\t}])\r\n\t;\r\n})();","(function() {\r\n\t\r\n\tangular.module('filterMod')\r\n\t.service('filterFunctions', function() {\r\n\t\t\t\r\n\t\tvar fFunctions = this;\r\n\t\t\r\n\t\t// Checks for a match with the filters.\r\n\t\t// If the value is an array, checks all values for one match.\r\n\t\t// If not, just checks single value.\r\n\t\tthis.filterCheck = function(value,search) {\r\n\t\t\tvar allMatch = true;\r\n\t\t\t\r\n\t\t\tfor(var key in search) {\r\n\t\t\t\tif(search.hasOwnProperty(key)) {\r\n\t\t\t\t\tvar thisValue = value[key];\r\n\t\t\t\t\tif(search[key].isArray) {\r\n\t\t\t\t\t\tvar numValues = thisValue.length,\r\n\t\t\t\t\t\t\tmatchFound = false;\r\n\t\t\t\t\t\tfor(var i = 0; i < numValues; i++) {\r\n\t\t\t\t\t\t\tif(checkValue(thisValue[i], search, key)) {\r\n\t\t\t\t\t\t\t\tmatchFound = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!matchFound) {\r\n\t\t\t\t\t\t\tallMatch = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tallMatch = checkValue(thisValue, search, key);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(allMatch === false) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn allMatch;\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t// Function that checks value against the query filter & checkboxes\r\n\t\tvar checkValue = function(value, search, key) {\r\n\t\t\t\r\n\t\t\tvar checkMatch = true,\r\n\t\t\t\tvalueMatch = false,\r\n\t\t\t\tcheckboxes = search[key].checkboxes,\r\n\t\t\t\tsearchOn = search[key].searchOn;\r\n\t\t\t\t\r\n\t\t\tif(searchOn && value) {\r\n\t\t\t\tvar thisValue = value[searchOn];\r\n\t\t\t} else {\r\n\t\t\t\tvar thisValue = value;\r\n\t\t\t}\r\n\t\t\tif(checkboxes) {\r\n\t\t\t\tcheckMatch = checkTheBoxes(thisValue,key,checkboxes);\r\n\t\t\t}\r\n\t\t\tvalueMatch = fFunctions.queryFilterCheck(thisValue,search[key].query);\r\n\t\t\t\r\n\t\t\treturn checkMatch && valueMatch;\r\n\t\t};\r\n\t\t\r\n\t\t// Checks query value against actual.  Also used to hide/show checkboxes based on the typed filter.\r\n\t\tthis.queryFilterCheck = function(value,query) {\r\n\t\t\tif(!value) {\r\n\t\t\t\tvalue = '';\r\n\t\t\t}\r\n\t\t\treturn value.toLowerCase().indexOf(query.toLowerCase()) > -1;\r\n\t\t};\r\n\t\t\r\n\t\t// Function to loop through the checkboxes variable and return true if the value is a match\r\n\t\tvar checkTheBoxes = function (value,filterset,checkboxes) {\r\n\t\t\tif(value) {\r\n\t\t\t\tvar i = 0;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tif(value === checkboxes[i]) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti++;\r\n\t\t\t\t} while(typeof checkboxes[i] !== 'undefined')\r\n\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\tif(checkboxes['none']) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t})\r\n\t;\r\n})();","(function() {\r\n\t\r\n\tangular.module('filterMod')\r\n\t.controller('filterCompController', ['$scope','filterFunctions', function($scope,filterFunctions) {\r\n\t\t\r\n\t\tvar boxSetup = function (items) {\r\n\t\t\t\r\n\t\t\tvar checkboxes = {none:true};\r\n\t\t\t\r\n\t\t\tfor(var i = 0; i < items.length; i++) {\r\n\t\t\t\tcheckboxes[i] = items[i];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn checkboxes;\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t$scope.search.checkboxes = boxSetup($scope.items);\r\n\t\t\r\n\t\t$scope.$watch('items',function(newValue,oldValue) {\r\n\t\t\t$scope.search.checkboxes = boxSetup(newValue);\r\n\t\t});\r\n\t\t\r\n\t\tthis.onlyBox = function(boxNum,boxName) {\r\n\t\t\tvar i = 0;\r\n\t\t\tdo {\r\n\t\t\t\t$scope.search.checkboxes[i] = false;\t\t\t\t\t\r\n\t\t\t\ti++;\r\n\t\t\t} while(typeof $scope.search.checkboxes[i] !== 'undefined')\r\n\t\t\tif(boxNum === 'none') {\r\n\t\t\t\t$scope.search.checkboxes['none'] = true;\r\n\t\t\t} else {\r\n\t\t\t\t$scope.search.checkboxes[boxNum] = boxName;\r\n\t\t\t\t$scope.search.checkboxes['none'] = false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tthis.allBoxes = function () {\r\n\t\t\tfor(var i = 0; i < $scope.items.length; i++) {\r\n\t\t\t\t$scope.search.checkboxes[i] = $scope.items[i];\r\n\t\t\t}\r\n\t\t\t$scope.search.checkboxes['none'] = true;\r\n\t\t};\r\n\t\t\r\n\t\tthis.showCheckbox = function (value,query) {\r\n\t\t\treturn filterFunctions.queryFilterCheck(value,query);\r\n\t\t};\t\r\n\t\t\r\n\t}])\r\n\t;\r\n})();","(function() {\r\n\t\r\n\tangular.module('overlayMod')\r\n\t\t.controller('overlayController', ['$scope',function($scope) {\r\n\t\t\t\r\n\t\t\tthis.cancelAction = function() {\r\n\t\t\t\t$scope.messageNum = 0;\r\n\t\t\t};\r\n\t\t\t\r\n\t\t}])\r\n})();","(function() {\r\n\tangular.module('listMod')\r\n\t.controller('listController',['$scope','$rootScope','listFunctions',function($scope,$rootScope,listFunctions) {\r\n\t\t\r\n\t\tvar lCtrl = this,\r\n\t\t\tkey = $scope.keyName,\r\n\t\t\tordKey = $scope.ordKey,\r\n\t\t\tlistName = $scope.listName;\r\n\t\t\r\n\t\t// Sets selectedList as empty array for this list number.\r\n\t\tlistFunctions.clearSelected(listName);\r\n\t\tthis.hideOverlay = true;\r\n\t\t\r\n\t\tthis.lFunc = listFunctions;\r\n\t\tthis.newSection = '';\r\n\t\tthis.currentSection = '';\r\n\t\t\r\n\t\t// Toggle selection of item - changes select property of item between true/false and adds/removes from selection array (see listServ.js for function)\r\n\t\t// Optional selectOne: if true all items will be deselected first so only one item is selected at a time\r\n\t\tthis.toggleSelect = function(item,index,selectOne) {\r\n\t\t\tlistFunctions.toggleSelect(item,index,key,listName,selectOne);\t\t\r\n\t\t};\r\n\t\t\r\n\t\t// Custom filter function checking item first against a list of exclusions then against custom filter values\r\n\t\tthis.filterCheck = function(value,index,array) {\r\n\t\t\treturn listFunctions.filterCheck(value,index,$scope.search,key,listName);\r\n\t\t};\r\n\t\t\r\n\t\t// Returns the length a list (main list if not specified).\r\n\t\tthis.getLength = function(listName,subList) {\r\n\t\t\tif(!subList) {\r\n\t\t\t\tsubList = 'main';\r\n\t\t\t}\r\n\t\t\treturn listFunctions.Lists[listName][subList].length;\r\n\t\t};\r\n\t\t\r\n\t\t// Move selected items or one item if specified.\r\n\t\tthis.moveItems = function(direction,item) {\r\n\t\t\tlistFunctions.moveItems(direction,key,ordKey,listName,item && item[key]);\r\n\t\t\tlistFunctions.setOrderSave(true);\r\n\t\t};\r\n\t\t\r\n\t\tthis.checkSelected = function() {\r\n\t\t\treturn listFunctions.checkSelected(listName);\r\n\t\t};\r\n\t\t\r\n\t\tthis.selectAll = function() {\r\n\t\t\tlistFunctions.selectAll(key,listName);\r\n\t\t};\r\n\t\t\r\n\t\tthis.deselectAll = function() {\r\n\t\t\tlistFunctions.deselectAll(key,listName);\r\n\t\t};\r\n\t\t\r\n\t\tthis.linkSection = function(section) {\r\n\t\t\tlistFunctions.groupSelected(key,ordKey,section,listName);\r\n\t\t};\r\n\t\t\r\n\t\tthis.addToSections = function(section) {\r\n\t\t\tlistFunctions.addToSections(section,listName);\r\n\t\t};\r\n\t\t\r\n\t}])\r\n\t\r\n\t;\r\n})();","(function() {\r\n\tangular.module('listMod')\r\n\t.service('listFunctions', ['$q','filterFunctions',function ($q,filterFunctions) {\r\n\t\t\r\n\t\tvar lFunc = this,\r\n\t\t\teditList = [],\r\n\t\t\tcurrentFilteredList = [];\t\t\t\r\n\t\t\r\n\t\tthis.Lists = {};\r\n\t\tthis.orderSavePending = false;\r\n\t\t\r\n\t\tthis.setList = function(listArray,listName,excludeArray) {\r\n\t\t\tthis.Lists[listName] = { main:listArray,selected:[],edit:[],filtered:[],exclude:excludeArray,sections:[''] };\r\n\t\t\tvar mainArray = this.Lists[listName].main,\r\n\t\t\t\tsectionArray = this.Lists[listName].sections;\r\n\t\t\tfor(var i = 0; i < mainArray.length; i++) {\r\n\t\t\t\tif(mainArray[i].section && sectionArray.indexOf(mainArray[i].section) === -1) {\r\n\t\t\t\t\tsectionArray.push(mainArray[i].section);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tthis.clearSelected = function(listName) {\r\n\t\t\tthis.Lists[listName].selected = [];\r\n\t\t};\r\n\t\t\r\n\t\tthis.checkSelected = function(listName) {\r\n\t\t\treturn this.Lists[listName].selected.length === 0;\r\n\t\t};\r\n\t\t\r\n\t\tthis.listLength = function(listName,subList) {\r\n\t\t\tsubList = typeof subList !== 'undefined' ? subList : 'main';\r\n\t\t\tif(this.Lists[listName]) {\r\n\t\t\t\treturn this.Lists[listName][subList].length;\r\n\t\t\t} else {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t// Copies the selected list over to the edit list (for 'edit selected' situations)\r\n\t\tthis.selectToEdit = function(listName) {\r\n\t\t\tthis.Lists[listName].edit = this.Lists[listName].selected;\r\n\t\t};\r\n\t\t\r\n\t\tthis.editOne = function(id,listName,idName) {\r\n\t\t\tvar index = this.findById(id,listName,idName);\r\n\t\t\tthis.Lists[listName].edit = [];\r\n\t\t\tthis.Lists[listName].edit.push(this.Lists[listName].main[index]);\r\n\t\t};\r\n\t\t\r\n\t\t// First checks exclude array for item, then checks search value (see filterService.js)\r\n\t\tthis.filterCheck = function(value,index,search,keyName,listName) {\r\n\t\t\tvar listCheck = false,\r\n\t\t\t\tshowItem = false;\r\n\t\t\tlistCheck = lFunc.findById(value[keyName],listName,keyName,'exclude');\r\n\t\t\tif(listCheck === false) {\r\n\t\t\t\tshowItem = filterFunctions.filterCheck(value,search);\r\n\t\t\t\t// Deselect item if the filter excludes the item\r\n\t\t\t\tif(value.selected && !showItem && index >= 0) {\r\n\t\t\t\t\tlFunc.deselectItem(value[keyName],index,keyName,listName);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlFunc.setFiltered(listName,index,showItem);\r\n\t\t\treturn showItem;\r\n\t\t};\r\n\t\t\r\n\t\t// Adds property with filter status of element\r\n\t\tthis.setFiltered = function(listName,index,show) {\r\n\t\t\tthis.Lists[listName].main[index].showItem = show;\r\n\t\t};\r\n\t\t\r\n\t\t// Creates a list of only the currently filtered elements of the main array. Returns this filtered array.\r\n\t\tthis.setFilterArray = function(listName) {\r\n\t\t\tvar mainArray = this.Lists[listName].main;\r\n\t\t\tfor(var i = 0; i < mainArray.length; i++) {\r\n\t\t\t\tif(mainArray[i].showItem === true) {\r\n\t\t\t\t\tthis.Lists[listName].filtered.push(mainArray[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this.Lists[listName].filtered;\r\n\t\t};\r\n\t\t\r\n\t\t// Toggle selection of item - changes select property of item between true/false and adds/removes from selection array\r\n\t\t// Optional selectOne: if true all items will be deselected first so only one item is selected at a time \r\n\t\t// NOTE: index parameter is changed to fallback in case id not found\r\n\t\tthis.toggleSelect = function(item,index,key,listName,selectOne) {\r\n\t\t\tkey = key ? key : 'id';\r\n\t\t\tvar id = item[key];\r\n\t\t\tvar idIndex = this.findById(id,listName,key,'main');\r\n\t\t\tif(selectOne) {\r\n\t\t\t\tthis.deselectAll(key,listName);\r\n\t\t\t}\r\n\t\t\tif(!item.selected) {\r\n\t\t\t\tthis.selectItem(item,idIndex || index,key,listName);\r\n\t\t\t} else {\r\n\t\t\t\tthis.deselectItem(id,idIndex || index,key,listName);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Function to create a comma separated list of a particular property within one of the lists. keyName specifies property to use (name of the item, generally). \r\n\t\tthis.makeList = function(listName,keyName,subList) {\r\n\t\t\tif(!subList) {\r\n\t\t\t\tsubList = 'main';\r\n\t\t\t}\r\n\t\t\tvar listArray = this.Lists[listName][subList],\r\n\t\t\t\tmessage = '';\r\n\t\t\tfor(var i = 0; i < listArray.length; i++) {\r\n\t\t\t\tmessage += listArray[i][keyName];\r\n\t\t\t\tif(i < listArray.length - 1) {\r\n\t\t\t\t\tmessage += ', ';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn message;\r\n\t\t};\r\n\r\n\t\t// Returns the index of the item within the an array (specified by listName and subList) or false if not found.  Search by key (should be unique id).\r\n\t\tthis.findById = function(id,listName,key,subList) {\r\n\t\t\tkey = typeof key !== 'undefined' ? key : 'id';\r\n\t\t\tsubList = typeof subList !== 'undefined' ? subList : 'main';\r\n\t\t\tvar listArray = this.Lists[listName][subList];\r\n\t\t\tfor(var i = 0; i < listArray.length; i++) {\r\n\t\t\t\tif(String(listArray[i][key]) === String(id)) {\r\n\t\t\t\t\treturn i;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t\r\n\t\t// Finish a delete by id on the main list by clearing the sublists as well\r\n\t\tvar finishDelete = function(listName,subList) {\r\n\t\t\tvar list = lFunc.Lists[listName][subList];\r\n\t\t\tfor(var i = list.length - 1; i > -1; i--) {\r\n\t\t\t\tif(list[i].delete) {\r\n\t\t\t\t\tlist.splice(i,1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t// Deletes items found in delArray from main list searching by id. Does nothing with items which are not found.\r\n\t\tthis.deleteById = function(delArray,idName,listName,subList) {\r\n\t\t\tvar numItems = delArray.length;\r\n\t\t\tsubList = typeof subList !== 'undefined' ? subList : 'main';\r\n\t\t\tfor(var i = 0; i < numItems; i++) {\r\n\t\t\t\tvar imgIndex = lFunc.findById(delArray[i][idName],listName,idName,subList);\r\n\t\t\t\tif(imgIndex !== false) {\r\n\t\t\t\t\tif(subList === 'main') {\r\n\t\t\t\t\t\tlFunc.Lists[listName][subList][imgIndex].delete = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlFunc.Lists[listName][subList].splice(imgIndex,1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar subLists = [];\r\n\t\t\tif(subList === 'main') {\r\n\t\t\t\tsubLists = [ 'selected', 'filtered', 'edit' ];\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < subLists.length; i++) {\r\n\t\t\t\tfinishDelete(listName,subLists[i]);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t// Selects all items within the current filter set\r\n\t\tthis.selectAll = function(key,listName) {\r\n\t\t\tkey = typeof key !== 'undefined' ? key : 'id';\r\n\t\t\tvar filteredItems = this.setFilterArray(listName);\r\n\t\t\tvar numItems = filteredItems.length;\r\n\t\t\tfor(var i = 0; i < numItems; i++) {\r\n\t\t\t\tif(!filteredItems[i].selected) {\r\n\t\t\t\t\tlFunc.selectItem(filteredItems[i],undefined,key,listName);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t// Deselects all items\r\n\t\tthis.deselectAll = function(key,listName) {\r\n\t\t\tkey = typeof key !== 'undefined' ? key : 'id';\r\n\t\t\tvar numPhotos = this.Lists[listName].main.length;\r\n\t\t\tif(!this.checkSelected(listName)) {\r\n\t\t\t\tfor(var i = 0; i < numPhotos; i++) {\r\n\t\t\t\t\tvar item = this.Lists[listName].main[i];\r\n\t\t\t\t\tif(item.selected) {\r\n\t\t\t\t\t\tthis.deselectItem(item.id,i,key,listName);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tthis.deselectItem = function(id,index,key,listName) {\r\n\t\t\tkey = typeof key !== 'undefined' ? key : 'id';\r\n\t\t\tlFunc.Lists[listName].main[index].selected = false;\r\n\t\t\tvar selIndex = lFunc.findById(id,listName,key,'selected');\r\n\t\t\tlFunc.Lists[listName].selected.splice(selIndex,1);\r\n\t\t};\r\n\r\n\t\tthis.selectItem = function(item,index,key,listName) {\r\n\t\t\tkey = typeof key !== 'undefined' ? key : 'id';\r\n\t\t\tif(!index) {\r\n\t\t\t\tindex = this.findById(item[key],listName,key,'main');\r\n\t\t\t}\r\n\t\t\tthis.Lists[listName].main[index].selected = true;\r\n\t\t\tthis.Lists[listName].selected.push(item);\r\n\t\t};\r\n\t\t\r\n\t\t// After items are moved in list, sets the order value (named ordKey) to the correct number for the DB.  Also adds order and section to the selected list.\r\n\t\tvar resetOrder = function(key,ordKey,listName,section) {\r\n\t\t\tvar selIndex = 0;\r\n\t\t\tfor(i = 0; i < lFunc.Lists[listName].main.length; i++) {\r\n\t\t\t\tlFunc.Lists[listName].main[i][ordKey] = i;\r\n\t\t\t\tif(lFunc.Lists[listName].main.selected) {\r\n\t\t\t\t\tselIndex = lFunc.findById(lFunc.Lists[listName].main[i][key],listName,key,'selected');\r\n\t\t\t\t\tlFunc.Lists[listName].selected[selIndex][ordKey] = i;\r\n\t\t\t\t\tif(typeof section !== 'undefined') {\r\n\t\t\t\t\t\tlFunc.Lists[listName].selected[selIndex].section = section;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t// Adds the selected items to a section and reorders items to group those together.\r\n\t\tthis.groupSelected = function(key,ordKey,section,listName) {\r\n\t\t\tvar listTemp = lFunc.Lists[listName].main,\r\n\t\t\t\tfirstIndex = -1,\r\n\t\t\t\tmoveIndex = 0,\r\n\t\t\t\tselIndex;\r\n\t\t\tfor(var i = 0; i < listTemp.length; i++) {\r\n\t\t\t\tif(listTemp[i].selected || listTemp[i].section === section) {\r\n\t\t\t\t\tif(firstIndex === -1) {\r\n\t\t\t\t\t\tfirstIndex = i;\r\n\t\t\t\t\t\tlistTemp[i].section = section;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmoveIndex = i;\r\n\t\t\t\t\t\tlistTemp[moveIndex].section = section;\r\n\t\t\t\t\t\tlistTemp.splice(firstIndex+1,0,listTemp.splice(moveIndex,1)[0]);\r\n\t\t\t\t\t\tfirstIndex++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlFunc.Lists[listName].main = listTemp;\r\n\t\t\tresetOrder(key,ordKey,listName,section);\r\n\t\t};\r\n\t\t\r\n\t\t// Moves one item.  Checks the sections of the items to ensure items within same section stick together.\r\n\t\tvar selectedIdArray = function(key,listName) {\r\n\t\t\treturn lFunc.Lists[listName].selected.map(function(val) { return val[key]; });\r\n\t\t};\r\n\t\t\r\n\t\t// Moves selected items or one item as specified by id.  Checks the sections of the items to ensure items within same section stick together.\r\n\t\tthis.moveItems = function(direction,key,ordKey,listName,id) {\r\n\t\t\tvar selSection = null,\r\n\t\t\t\tlistLen = lFunc.Lists[listName].main.length,\r\n\t\t\t\tmultiplier,\r\n\t\t\t\tnextSection,\r\n\t\t\t\tidArray;\r\n\t\t\t\t\r\n\t\t\tif(id) {\r\n\t\t\t\tidArray = [id];\r\n\t\t\t} else {\r\n\t\t\t\tidArray = selectedIdArray(key,listName);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar i = direction > 0 ? listLen - 1 : 0;\r\n\t\t\t// Loop through main list opposite the direction of the movement of items to make sure order is otherwise preserved.\r\n\t\t\tfor(i; i < listLen && i >= 0; i = i - direction) {\r\n\t\t\t\tmultiplier = 1;\r\n\t\t\t\t// If the item is in the selected list or the section is moving.\r\n\t\t\t\tif(idArray.indexOf(lFunc.Lists[listName].main[i][key]) !== -1 || lFunc.Lists[listName].main[i].section === selSection) {\r\n\t\t\t\t\t// Set selSection to section of a selected item.\r\n\t\t\t\t\tif(lFunc.Lists[listName].main[i].section) {\r\n\t\t\t\t\t\tselSection = lFunc.Lists[listName].main[i].section;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// If the movement would put the item outside of list boundaries or another selection has hit those boundaries don't move.\r\n\t\t\t\t\tif(i+direction >= 0 && i+direction < listLen && !lFunc.Lists[listName].main[i+direction].selected) {\r\n\t\t\t\t\t\t// If the next item is in a defined section, need to check & count items in section to jump over or stop movement.\r\n\t\t\t\t\t\tif(lFunc.Lists[listName].main[i+direction].section !== '' && lFunc.Lists[listName].main[i].section !== lFunc.Lists[listName].main[i+direction].section) {\r\n\t\t\t\t\t\t\tnextSection = lFunc.Lists[listName].main[i+direction].section;\r\n\t\t\t\t\t\t\tmultiplier = 0;\r\n\t\t\t\t\t\t\t// Loop back through array in the direction of movement.\r\n\t\t\t\t\t\t\tfor(var j = i + direction; j < listLen && j >= 0; j = j + direction) {\r\n\t\t\t\t\t\t\t\t// If the item is in the section...\r\n\t\t\t\t\t\t\t\tif(lFunc.Lists[listName].main[j].section === nextSection) {\r\n\t\t\t\t\t\t\t\t\t// If selected stop movement and break.\r\n\t\t\t\t\t\t\t\t\tif(lFunc.Lists[listName].main[j].selected) {\r\n\t\t\t\t\t\t\t\t\t\tmultiplier = 0;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t// If not, count section.\r\n\t\t\t\t\t\t\t\t\tmultiplier++;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t// Break loop at first item not in section.\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlFunc.Lists[listName].main.splice(i+(direction*multiplier),0,lFunc.Lists[listName].main.splice(i,1)[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Reset order variable for database.\r\n\t\t\tresetOrder(key,ordKey,listName);\r\n\t\t};\r\n\t\t\r\n\t\tthis.setOrderSave = function(orderSave) {\r\n\t\t\tthis.orderSavePending = orderSave ? orderSave : false;\r\n\t\t};\r\n\t\t\r\n\t\tthis.toggleFlag = function(id,listName,idName,toggleName,unique) {\r\n\t\t\tvar thisList = this.Lists[listName].main;\r\n\t\t\tfor(var i = 0; i < thisList.length; i++) {\r\n\t\t\t\tif(thisList[i][idName] === id) {\r\n\t\t\t\t\tthisList[i][toggleName] = '1';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(unique) {\r\n\t\t\t\t\t\tthisList[i][toggleName] = '0';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tthis.addToSections = function(section,listName) {\r\n\t\t\tthis.Lists[listName].sections.push(section);\r\n\t\t};\r\n\t\t\r\n\t\tthis.makeTempId = function(listName,idName,tempId) {\r\n\t\t\tif(this.findById(tempId,listName,idName) === false) {\r\n\t\t\t\treturn tempId;\r\n\t\t\t}\r\n\t\t\treturn this.makeTempId(listName,idName,tempId + 1);\r\n\t\t};\t\r\n\t}]);\r\n})();"]}